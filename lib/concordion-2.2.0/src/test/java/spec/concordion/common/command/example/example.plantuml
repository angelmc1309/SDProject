@startuml

title __EXAMPLE's Class Diagram__\n

  namespace  {
    namespace pec.concordion {
      namespace common.command {
        namespace example {
          class spec.concordion.common.command.example.ExampleFixture {
              - counter : int
              - numberRowsInserted : int
              + addTableRow()
              + getCounter()
              + incrementCounter()
              + isNull()
              + isTrue()
              + numberTableRowsInserted()
              + runTestDummySpec()
              + setCounter()
          }
        }
      }
    }
  }
  

  namespace  {
    namespace pec.concordion {
      namespace common.command {
        namespace example {
          class spec.concordion.common.command.example.FailFastExampleFixture {
              - counter : int
              + getCounter()
              + throwException()
          }
        }
      }
    }
  }
  

  namespace  {
    namespace pec.concordion {
      namespace common.command {
        namespace example {
          class spec.concordion.common.command.example.FixtureWithExampleHookMethodsFixture {
              {static} - staticAfterExampleCounter : AtomicInteger
              {static} - staticBeforeExampleCounter : AtomicInteger
              + getAfterExampleCounter()
              + getBeforeExampleCounter()
              - afterEachExample()
              - beforeEachExample()
          }
        }
      }
    }
  }
  

  namespace  {
    namespace pec.concordion {
      namespace common.command {
        namespace example {
          class spec.concordion.common.command.example.FixtureWithExampleInitialisationFixture {
              - counter : int
              {static} - staticFieldCounter : AtomicInteger
              + getFieldInitialisationCounter()
              - incrementOnEachCall()
          }
        }
      }
    }
  }
  

  namespace  {
    namespace pec.concordion {
      namespace common.command {
        namespace example {
          class spec.concordion.common.command.example.FixtureWithExampleWithoutOuterExampleHookMethodsFixture {
              {static} - staticAfterExampleCounter : AtomicInteger
              {static} - staticBeforeExampleCounter : AtomicInteger
              + getAfterExampleCounter()
              + getBeforeExampleCounter()
              - afterEachExample()
              - beforeEachExample()
          }
        }
      }
    }
  }
  

  namespace  {
    namespace pec.concordion {
      namespace common.command {
        namespace example {
          class spec.concordion.common.command.example.FixtureWithExampleWithoutOuterExampleInitialisationFixture {
              - counter : int
              {static} - staticFieldCounter : AtomicInteger
              + getFieldInitialisationCounter()
              - incrementOnEachCall()
          }
        }
      }
    }
  }
  

  namespace  {
    namespace pec.concordion {
      namespace common.command {
        namespace example {
          class spec.concordion.common.command.example.FixtureWithoutExampleHookMethodsFixture {
              {static} - staticAfterExampleCounter : AtomicInteger
              {static} - staticBeforeExampleCounter : AtomicInteger
              + getAfterExampleCounter()
              + getBeforeExampleCounter()
              - afterEachExample()
              - beforeEachExample()
          }
        }
      }
    }
  }
  

  namespace  {
    namespace pec.concordion {
      namespace common.command {
        namespace example {
          class spec.concordion.common.command.example.FixtureWithoutExampleInitialisationFixture {
              - counter : int
              {static} - staticFieldCounter : AtomicInteger
              + FixtureWithoutExampleInitialisationFixture()
              + getFieldInitialisationCounter()
          }
        }
      }
    }
  }
  

  namespace  {
    namespace pec.concordion {
      namespace common.command {
        namespace example {
          class spec.concordion.common.command.example.SpecCallingFailFastExampleFixture {
          }
        }
      }
    }
  }
  

  namespace  {
    namespace pec.concordion {
      namespace common.command {
        namespace example {
          class spec.concordion.common.command.example.SpecWithBeforeSpec {
              # beforeSpecCounter : ScopedObjectHolder<AtomicInteger>
              + beforeSpec()
              + beforeSpecRunOnce()
          }
        }
      }
    }
  }
  



right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
